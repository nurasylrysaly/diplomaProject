<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css" crossorigin="anonymous"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous" />
    <link rel="stylesheet" type="text/css" href="css/map.css" />
    <link rel="stylesheet" href="css/layout.css" />
    <link rel="stylesheet" href="css/navbar.css" />

    <title>Map</title>
    <style>
        .movement-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            background-color: #f8f9fa;
        }
        .movement-icon {
            width: 30px;
            height: 30px;
            margin-right: 10px;
            font-size: 20px;
        }
        .movement-icon.walkway {
            color: #007bff;
        }
        .movement-icon.passage {
            color: #28a745;
        }
        .movement-icon.crossing {
            color: #ffc107;
        }
        .movement-icon.finish {
            color: #dc3545;
        }
        .movement-content {
            flex: 1;
        }
    </style>
</head>
<body>

    <%- include("includes/navbar.ejs") %>

    <div class="main-container">
        <div id="map-container">
            <div id="container" style="width: 100%; height: 100%;"></div>
        </div>
        <div id="route-info" style="display: none;">
            <div id="carouselExampleIndicators" class="carousel slide" data-bs-interval="false">
                <div class="carousel-indicators" id="carousel-indicators">
                    <!-- Indicators will be dynamically added -->
                </div>
                <div class="carousel-inner" id="carousel-inner">
                    <!-- Carousel items will be dynamically added -->
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
                <button id="save-route" class="btn btn-primary">Save route</button>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="toast-body">
                Route saved to favorites
            </div>
        </div>
    </div>

    <%- include("includes/footer.ejs") %>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" crossorigin="anonymous"></script>
    <script src="https://mapgl.2gis.com/api/js/v1"></script>
    <script src="https://unpkg.com/@2gis/mapgl-directions@^2/dist/directions.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.min.js" crossorigin="anonymous"></script>
    <script>
        const map = new mapgl.Map('container', {
            center: [71.42222, 51.14722],
            zoom: 13,
            key: 'ec310ba8-50e5-4019-b2cf-5dd62b26f390',
        });
    
        const markers = [];
        let currIndex = 0;
        let firstPoint;
        let secondPoint;
        let selecting = 'a';
        let currentRouteData = null;
    
        const controlsHtml = `
            <button id="reset" style="
                background-color: #009970;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                font-family: 'Poppins', sans-serif;
                font-size: 14px;
            ">Reset points</button>
        `;
        new mapgl.Control(map, controlsHtml, {
            position: 'topLeft',
        });
    
        const resetButton = document.getElementById('reset');
        const saveRouteButton = document.getElementById('save-route');
        const carouselInner = document.getElementById('carousel-inner');
        const carouselIndicators = document.getElementById('carousel-indicators');
        const routeInfo = document.getElementById('route-info');
    
        resetButton.addEventListener('click', function() {
            selecting = 'a';
            firstPoint = undefined;
            secondPoint = undefined;
            carouselInner.innerHTML = '';
            carouselIndicators.innerHTML = '';
            routeInfo.style.display = 'none';
            markers.forEach(marker => marker.destroy());
            markers.length = 0;
        });
    
        saveRouteButton.addEventListener('click', async function() {
            try {
                const authResponse = await fetch('/auth/check', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                });
                
                if (!authResponse.ok) {
                    window.location.href = '/auth/login';
                    return;
                }
    
                if (!currentRouteData) {
                    console.error('currentRouteData is undefined');
                    return;
                }
                if (currIndex === undefined || !currentRouteData[currIndex]) {
                    console.error('currIndex is invalid or out of bounds:', currIndex);
                    return;
                }
    
                fetch('/favorites/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        route: currentRouteData[currIndex]
                    })
                }).then(response => {
                    if (response.ok) {
                        showToast('Route saved to favorites');
                    } else {
                        showToast('Error saving route');
                    }
                }).catch(error => {
                    console.error('Error:', error);
                    showToast('Error saving route');
                });
            } catch (error) {
                console.error('Error:', error);
                showToast('Error checking authentication');
            }
        });
    
        function showToast(message) {
            const toastBody = document.getElementById('toast-body');
            toastBody.innerText = message;
            const toast = new bootstrap.Toast(document.getElementById('liveToast'));
            toast.show();
        }
    
        async function getAddressFromCoords(coords) {
            const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords[1]},${coords[0]}&key=AIzaSyCLK10GFqb-cyrMzYJ8UP9B2NZ2wXgYM5s`;
            const response = await fetch(url);
            const data = await response.json();
            return data.results[0]?.formatted_address || 'Unknown location';
        }
    
        map.on('click', async (e) => {
            const coords = e.lngLat;
            const address = await getAddressFromCoords(coords);
    
            if (selecting !== 'end') {
                markers.push(
                    new mapgl.Marker(map, {
                        coordinates: coords,
                        label: {
                            text: address,
                            fontSize: 15,
                            offset: [0, 25],
                            relativeAnchor: [0.5, 0],
                            image: {
                                url: 'https://docs.2gis.com/img/mapgl/tooltip-top.svg',
                                size: [100, 50],
                                stretchX: [
                                    [10, 40],
                                    [60, 90],
                                ],
                                stretchY: [[20, 40]],
                                padding: [20, 10, 10, 10],
                            }
                        },
                    })
                );
            }
    
            if (selecting === 'a') {
                firstPoint = coords;
                selecting = 'b';
            } else if (selecting === 'b') {
                secondPoint = coords;
                selecting = 'end';
            }
    
            if (firstPoint && secondPoint) {
                const url = 'https://routing.api.2gis.com/public_transport/2.0?key=ec310ba8-50e5-4019-b2cf-5dd62b26f390';
                const data = {
                    locale: "eng",
                    source: {
                        name: "Point A",
                        point: {
                            lat: firstPoint[1],
                            lon: firstPoint[0]
                        }
                    },
                    target: {
                        name: "Point B",
                        point: {
                            lat: secondPoint[1],
                            lon: secondPoint[0]
                        }
                    },
                    transport: ["bus", "tram"]
                };
    
                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
    
                    if (!response.ok) {
                        if (response.status === 403) {
                            throw new Error('API key is not valid or does not have the necessary permissions.');
                        } else {
                            throw new Error('Network response was not ok');
                        }
                    }
    
                    const jsonResponse = await response.json();
                    console.log('Response:', jsonResponse);
                    displayRouteInfo(jsonResponse);
                    currentRouteData = jsonResponse;
                } catch (error) {
                    console.error('There was a problem with the fetch operation:', error.message);
                }
            }
        });
    
        function displayRouteInfo(routeData) {
            let html = '';
            let indicatorsHtml = '';
            routeData.forEach((route, index) => {
                indicatorsHtml += `<button type="button" style="width: 50px; height: 25px" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="${index}" class="${index === 0 ? 'active' : ''}" aria-current="true" aria-label="Slide ${index + 1}">${index + 1}</button>`;
                html += `<div class="carousel-item ${index === 0 ? 'active' : ''}">
                    <h5 style="margin-left: 35px">Route ${index + 1}</h5>
                    <p><i>Total Walkway Distance:</i> ${route.total_walkway_distance}</p>
                    <h6>Movements:</h6>
                    <ul>`;
                route.movements.forEach(movement => {
                    const pointName = movement.waypoint ? movement.waypoint.name : 'N/A';
                    const pointComment = movement.waypoint ? movement.waypoint.comment : 'N/A';
                    const routes = movement.routes ? movement.routes.map(r => r.names.join(', ')).join(', ') : '';
                    html += `<li class="movement-item">
                        <div class="movement-icon ${movement.type}">${getIconForType(movement.type)}</div>
                        <div class="movement-content">
                            <p>${pointName} ${movement.type} ${pointComment ? `(${pointComment})` : ''}</p>
                            ${routes ? `<p>Buses: ${routes}</p>` : ''}
                        </div>
                    </li>`;
                });
                html += '</ul></div>';
            });
            carouselInner.innerHTML = html;
            carouselIndicators.innerHTML = indicatorsHtml;
            routeInfo.style.display = 'block';
    
            // Add click event listeners to indicators
            document.querySelectorAll('.carousel-indicators button').forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    $('#carouselExampleIndicators').carousel(index);
                    currIndex = index;
                });
            });
        }
    
        function getIconForType(type) {
            switch(type) {
                case 'walkway':
                    return '<i class="fas fa-walking"></i>';
                case 'passage':
                    return '<i class="fas fa-bus"></i>';
                case 'crossing':
                    return '<i class="fas fa-arrows-alt-h"></i>';
                case 'finish':
                    return '<i class="fas fa-flag-checkered"></i>';
                default:
                    return '<i class="fas fa-question"></i>';
            }
        }
    
        document.querySelector('.carousel-control-prev').addEventListener('click', () => {
            $('#carouselExampleIndicators').carousel('prev');
        });
    
        document.querySelector('.carousel-control-next').addEventListener('click', () => {
            $('#carouselExampleIndicators').carousel('next');
        });
    </script>
</body>
</html>
